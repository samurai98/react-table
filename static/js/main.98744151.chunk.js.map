{"version":3,"sources":["data/columns.ts","components/Filters/GlobalFilter.tsx","components/Filters/ColumnFilter.tsx","components/common/Checkbox.jsx","components/common/PreCode.tsx","components/common/Pagination.tsx","components/common/ToggleVisibilityColumns.tsx","components/PartsTable/TableHead.tsx","components/PartsTable/TableBody.tsx","components/PartsTable/TableFoot.tsx","components/MainTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GROUPED_COLUMNS","Header","Footer","accessor","disableFilters","columns","Cell","value","format","Date","GlobalFilter","filter","setFilter","className","type","onChange","e","target","ColumnFilter","column","filterValue","placeholder","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","PreCode","selectedFlatRows","JSON","stringify","map","row","original","Pagination","props","pageIndex","pageOptions","length","min","max","pageNumber","Number","gotoPage","onClick","disabled","canPreviousPage","previousPage","nextPage","canNextPage","pageCount","pageSize","setPageSize","ToggleVisibilityColumns","getToggleHideAllColumnsProps","allColumns","getToggleHiddenProps","id","TableHead","headerGroups","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","getSortByToggleProps","isSorted","isSortedDesc","canSort","canFilter","TableBody","getTableBodyProps","page","prepareRow","getRowProps","cells","cell","getCellProps","TableFoot","footerGroups","footerGroup","getFooterGroupProps","getFooterProps","MainTable","useMemo","data","MOCK_DATA","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","state","setGlobalFilter","globalFilter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.98744151.chunk.js","sourcesContent":["import {columnsGroupedType} from '../types/entities'\r\nimport {format} from 'date-fns'\r\n\r\nexport const GROUPED_COLUMNS: Array<columnsGroupedType> = [\r\n    {\r\n        Header: 'Id',\r\n        Footer: 'Id',\r\n        accessor: 'id',\r\n        disableFilters: true\r\n    },\r\n    {\r\n        Header: 'Name',\r\n        Footer: 'Name',\r\n        columns: [\r\n            {\r\n                Header: 'First Name',\r\n                Footer: 'First Name',\r\n                accessor: 'first_name'\r\n            },\r\n            {\r\n                Header: 'Last Name',\r\n                Footer: 'Last Name',\r\n                accessor: 'last_name'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        Header: 'Info',\r\n        Footer: 'Info',\r\n        columns: [\r\n            {\r\n                Header: 'Date of Birth',\r\n                Footer: 'Date of Birth',\r\n                accessor: 'date_of_birth',\r\n                Cell: ({value}) => {\r\n                    return format(new Date(value), 'dd/MM/yyyy')\r\n                }\r\n            },\r\n            {\r\n                Header: 'Country',\r\n                Footer: 'Country',\r\n                accessor: 'country'\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                Footer: 'Phone',\r\n                accessor: 'phone'\r\n            }\r\n        ]\r\n    }\r\n]","import React from 'react'\r\n\r\ntype globalFilterPropsType = {\r\n    filter: string\r\n    setFilter: (value: string) => void\r\n}\r\n\r\nexport const GlobalFilter = ({filter, setFilter}: globalFilterPropsType) => {\r\n    return (\r\n        <div className={'globalFilter'}>\r\n            <span>\r\n               Global search: {' '}\r\n                <input type=\"text\" value={filter} onChange={(e) => setFilter(e.target.value)}/>\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport type columnFilterPropsType = {\r\n    column: {\r\n        filterValue: string\r\n        setFilter: (value: string) => void\r\n    }\r\n}\r\n\r\nexport const ColumnFilter = ({column}: columnFilterPropsType) => {\r\n    const {filterValue, setFilter} = column\r\n    return (\r\n        <span>\r\n            <input type=\"text\"\r\n                   value={filterValue || ''}\r\n                   placeholder={'Search'}\r\n                   onChange={(e) => setFilter(e.target.value)}/>\r\n        </span>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Checkbox = React.forwardRef(({indeterminate, ...rest}, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n        <>\r\n            <input type='checkbox' ref={resolvedRef} {...rest}/>\r\n        </>\r\n    )\r\n})\r\n\r\n","import React from 'react'\r\nimport {mockDataType} from '../../types/entities'\r\nimport '../table.css'\r\n\r\ntype PropsType = {\r\n    selectedFlatRows: Array<{ original: mockDataType }>\r\n}\r\n\r\nexport const PreCode = ({selectedFlatRows}: PropsType) => {\r\n    return (<pre>\r\n                <code>\r\n                    {JSON.stringify(\r\n                        {\r\n                            selectedFlatRows: selectedFlatRows.map((row) => row.original)\r\n                        },\r\n                        null,\r\n                        2\r\n                    )}\r\n                </code>\r\n            </pre>)\r\n}","import React from 'react'\r\n\r\ntype PropsType = {\r\n    props: {\r\n        pageIndex: number\r\n        pageOptions: string\r\n        gotoPage: (n: number) => void\r\n        previousPage: () => void\r\n        nextPage: () => void\r\n        canPreviousPage: boolean\r\n        canNextPage: boolean\r\n        pageCount: number\r\n        pageSize: number\r\n        setPageSize: (n: number) => void\r\n    }\r\n}\r\n\r\nexport const Pagination = ({props}: PropsType) => {\r\n\r\n    return (<div className={'pagination'}>\r\n        <span>\r\n            Page{' '}\r\n            <strong>\r\n                {props.pageIndex + 1} of {props.pageOptions.length}\r\n            </strong>{' '}|{' '}\r\n            Go to page: {' '}\r\n            <input type=\"number\" min={1} max={props.pageOptions.length}\r\n                   value={props.pageIndex + 1}\r\n                   onChange={e => {\r\n                       const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n                       props.gotoPage(pageNumber)\r\n                   }}/>\r\n        </span>\r\n\r\n        <button onClick={() => props.gotoPage(0)} disabled={!props.canPreviousPage}>❮❮ First</button>\r\n        <button onClick={() => props.previousPage()} disabled={!props.canPreviousPage}>❮ Previous</button>\r\n        <button onClick={() => props.nextPage()} disabled={!props.canNextPage}>Next ❯</button>\r\n        <button onClick={() => props.gotoPage(props.pageCount - 1)} disabled={!props.canNextPage}>Last ❯❯</button>\r\n\r\n        <select value={props.pageSize} onChange={e => props.setPageSize(Number(e.target.value))}>\r\n            {\r\n                [10, 25, 50].map(pageSize => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                        Show {pageSize} rows\r\n                    </option>\r\n                ))\r\n            }\r\n        </select>\r\n    </div>)\r\n}","import React, {RefAttributes} from 'react'\r\nimport {Checkbox} from './Checkbox'\r\n\r\ntype PropsType = {\r\n    getToggleHideAllColumnsProps: () => RefAttributes<any>\r\n    allColumns: Array<{\r\n        id: string\r\n        getToggleHiddenProps: () => void\r\n        Header: string\r\n    }>\r\n}\r\n\r\nexport const ToggleVisibilityColumns = ({getToggleHideAllColumnsProps, allColumns}: PropsType) => {\r\n    return (<div className={'toggleVisibilityColumns'}>\r\n        Show columns:\r\n        <div>\r\n            <Checkbox {...getToggleHideAllColumnsProps()} />All columns\r\n        </div>\r\n        {allColumns.map((column) => (\r\n            <div key={column.id}>\r\n                <label>\r\n                    <input type=\"checkbox\" {...column.getToggleHiddenProps()}/>\r\n                    {column.id === 'selection' ? 'Selection' : column.Header}\r\n                </label>\r\n            </div>\r\n        ))}\r\n    </div>)\r\n}","import React, {ReactNode} from 'react'\r\n\r\ntype PropsType = {\r\n    headerGroups: Array<{\r\n        getFooterGroupProps: () => void\r\n        getHeaderGroupProps: () => void\r\n        headers: Array<{\r\n            getHeaderProps: () => void\r\n            render: (str: string) => ReactNode\r\n            getSortByToggleProps: () => void\r\n            isSorted: boolean\r\n            isSortedDesc: boolean | undefined\r\n            canSort: boolean\r\n            canFilter: boolean | undefined\r\n        }>\r\n    }>\r\n}\r\n\r\nexport const TableHead = ({headerGroups}: PropsType) => {\r\n\r\n    return (<thead>\r\n    {headerGroups.map((headerGroup) => (\r\n        <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>\r\n                    {column.render('Header')}\r\n                    <span {...column.getSortByToggleProps()}>\r\n                        {column.isSorted ? (column.isSortedDesc ? '🔼' : '🔽')\r\n                            : column.canSort ? ' ↕️' : ''}\r\n                    </span>\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>))}\r\n        </tr>))}\r\n    </thead>)\r\n}","import React, {ReactNode} from 'react'\r\n\r\ntype PageType = {\r\n    getRowProps: () => void\r\n    cells: Array<{\r\n        getCellProps: () => void\r\n        render: (str: string) => ReactNode\r\n    }>\r\n}\r\n\r\ntype PropsType = {\r\n    getTableBodyProps: () => void\r\n    page: Array<PageType>\r\n    prepareRow: (row: PageType) => void\r\n}\r\n\r\nexport const TableBody = ({getTableBodyProps, page, prepareRow}: PropsType) => {\r\n\r\n    return (<tbody {...getTableBodyProps()}>\r\n    {page.map((row) => {\r\n        prepareRow(row)\r\n        return (<tr {...row.getRowProps()}>\r\n            {row.cells.map((cell) => {\r\n                return <td {...cell.getCellProps()} > {cell.render('Cell')}</td>\r\n            })}\r\n        </tr>)\r\n    })}\r\n    </tbody>)\r\n}","import React, {ReactNode} from 'react'\r\n\r\ntype PropsType = {\r\n    footerGroups: Array<{\r\n        getFooterGroupProps: () => void\r\n        getHeaderGroupProps: () => void\r\n        headers: Array<{\r\n            getFooterProps: () => void\r\n            render: (str: string) => ReactNode\r\n        }>\r\n    }>\r\n}\r\n\r\nexport const TableFoot = ({footerGroups}: PropsType) => {\r\n\r\n    return (<tfoot>\r\n    {footerGroups.map((footerGroup) => (\r\n        <tr {...footerGroup.getFooterGroupProps()}>\r\n            {footerGroup.headers.map((column) => (\r\n                <td {...column.getFooterProps()}>\r\n                    {column.render('Footer')}\r\n                </td>\r\n            ))}\r\n        </tr>\r\n    ))}\r\n    </tfoot>)\r\n}","import React, {useMemo} from 'react'\r\nimport {\r\n    useTable, useSortBy, useGlobalFilter,\r\n    useFilters, usePagination, useRowSelect\r\n} from 'react-table'\r\nimport MOCK_DATA from '../data/MOCK_DATA.json'\r\nimport {GROUPED_COLUMNS} from '../data/columns'\r\nimport {columnsGroupedType, mockDataType} from '../types/entities'\r\nimport './table.css'\r\nimport {GlobalFilter} from './Filters/GlobalFilter'\r\nimport {ColumnFilter, columnFilterPropsType} from './Filters/ColumnFilter'\r\nimport {Checkbox} from './common/Checkbox'\r\nimport {PreCode} from './common/PreCode'\r\nimport {Pagination} from './common/Pagination'\r\nimport {ToggleVisibilityColumns} from './common/ToggleVisibilityColumns'\r\nimport {TableHead} from './PartsTable/TableHead'\r\nimport {TableBody} from './PartsTable/TableBody'\r\nimport {TableFoot} from './PartsTable/TableFoot'\r\n\r\nexport const MainTable = () => {\r\n\r\n    type defaultColumnType = { Filter: ({column}: columnFilterPropsType) => JSX.Element; }\r\n\r\n    const columns: Array<columnsGroupedType> = useMemo(() => GROUPED_COLUMNS, [])\r\n    const data: Array<mockDataType> = useMemo(() => MOCK_DATA, [])\r\n\r\n    const defaultColumn: any = useMemo((): defaultColumnType => {\r\n        return {\r\n            Filter: ColumnFilter\r\n        }\r\n    }, [])\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        footerGroups,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        prepareRow,\r\n        state,\r\n        setGlobalFilter,\r\n        selectedFlatRows,\r\n        allColumns,\r\n        getToggleHideAllColumnsProps\r\n    }: any = useTable({\r\n            columns,\r\n            data,\r\n            defaultColumn\r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect,\r\n        (hooks) => {\r\n            hooks.visibleColumns.push((columns: any) => {\r\n                return [\r\n                    {\r\n                        id: 'selection',\r\n                        Header: ({getToggleAllRowsSelectedProps}: any) => (\r\n                            <Checkbox {...getToggleAllRowsSelectedProps()}/>\r\n                        ),\r\n                        Cell: ({row}: any) => (\r\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\r\n                        )\r\n                    },\r\n                    ...columns\r\n                ]\r\n            })\r\n        })\r\n\r\n    const {globalFilter, pageIndex, pageSize} = state\r\n\r\n    return (\r\n        <>\r\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\r\n\r\n            <ToggleVisibilityColumns getToggleHideAllColumnsProps={getToggleHideAllColumnsProps}\r\n                                     allColumns={allColumns}/>\r\n\r\n            <table {...getTableProps()}>\r\n                <TableHead headerGroups={headerGroups}/>\r\n                <TableBody getTableBodyProps={getTableBodyProps}\r\n                           page={page} prepareRow={prepareRow}/>\r\n                <TableFoot footerGroups={footerGroups}/>\r\n            </table>\r\n\r\n            <Pagination props={{\r\n                pageIndex, pageOptions, gotoPage, previousPage, nextPage,\r\n                canPreviousPage, canNextPage, pageCount, pageSize, setPageSize\r\n            }}/>\r\n\r\n            <PreCode selectedFlatRows={selectedFlatRows}/>\r\n        </>\r\n    )\r\n}","import React from 'react'\nimport './App.css'\nimport {MainTable} from './components/MainTable'\n\nfunction App() {\n    return <MainTable/>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}